"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[789],{2600:(e,t,n)=>{n.d(t,{k:()=>o});var i=n(6540),a=n(2908),l=n(5293);const s={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function o(e){let{src:t,packages:n=[]}=e;const o=(0,i.useRef)(),d=(0,i.useRef)(),r=["core","rxjs",...n],{colorMode:p}=(0,l.G)();return(0,i.useEffect)((()=>{const e=r.reduce(((e,t)=>(Object.assign(e,s[t]),e)),{});a.A.embedProject(o.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:p,height:"500px"}).then((e=>{d.current=e.editor}))}),[]),(0,i.useEffect)((()=>{d.current&&d.current.setTheme(p)}),[p]),i.createElement("section",{style:{height:"500px"}},i.createElement("div",{ref:o}))}},1781:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=n(8168),a=(n(6540),n(5680));const l="import { createStore } from '@ngneat/elf';\nimport {\n  selectAllEntities,\n  setEntities,\n  withEntities,\n} from '@ngneat/elf-entities';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore({ name: 'todos' }, withEntities<Todo>());\n\ntodosStore.pipe(selectAllEntities()).subscribe((todos) => {\n  console.log(todos);\n});\n\ntodosStore.update(\n  setEntities([\n    { id: 1, label: 'one' },\n    { id: 2, label: 'two' },\n  ])\n);\n";var s=n(2600);const o={},d="Entities",r={unversionedId:"features/entities-management/entities",id:"features/entities-management/entities",title:"Entities",description:"This feature enables the store to act as an entities store. You can think of an entities state as a table in a database,",source:"@site/docs/features/entities-management/entities.mdx",sourceDirName:"features/entities-management",slug:"/features/entities-management/entities",permalink:"/elf/docs/features/entities-management/entities",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/entities-management/entities.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"The Facade Pattern",permalink:"/elf/docs/facade"},next:{title:"UI Entities",permalink:"/elf/docs/features/entities-management/ui-entities"}},p={},c=[{value:"Queries",id:"queries",level:2},{value:"<code>selectAllEntities</code>",id:"selectallentities",level:3},{value:"<code>selectAllEntitiesApply</code>",id:"selectallentitiesapply",level:3},{value:"<code>getAllEntitiesApply</code>",id:"getallentitiesapply",level:3},{value:"<code>selectEntities</code>",id:"selectentities",level:3},{value:"<code>selectEntity</code>",id:"selectentity",level:3},{value:"<code>selectEntityByPredicate</code>",id:"selectentitybypredicate",level:3},{value:"<code>selectMany</code>",id:"selectmany",level:3},{value:"<code>selectManyByPredicate</code>",id:"selectmanybypredicate",level:3},{value:"<code>selectFirst</code>",id:"selectfirst",level:3},{value:"<code>selectLast</code>",id:"selectlast",level:3},{value:"<code>selectEntitiesCount</code>",id:"selectentitiescount",level:3},{value:"<code>selectEntitiesCountByPredicate</code>",id:"selectentitiescountbypredicate",level:3},{value:"<code>getAllEntities</code>",id:"getallentities",level:3},{value:"<code>getEntitiesIds</code>",id:"getentitiesids",level:3},{value:"<code>getEntity</code>",id:"getentity",level:3},{value:"<code>getEntityByPredicate</code>",id:"getentitybypredicate",level:3},{value:"<code>hasEntity</code>",id:"hasentity",level:3},{value:"<code>getEntitiesCount</code>",id:"getentitiescount",level:3},{value:"<code>getEntitiesCountByPredicate</code>",id:"getentitiescountbypredicate",level:3},{value:"Mutations",id:"mutations",level:2},{value:"<code>setEntities</code>",id:"setentities",level:3},{value:"<code>setEntitiesMap</code>",id:"setentitiesmap",level:3},{value:"<code>addEntities</code>",id:"addentities",level:3},{value:"<code>addEntitiesFifo</code>",id:"addentitiesfifo",level:3},{value:"<code>updateEntities</code>",id:"updateentities",level:3},{value:"<code>updateEntitiesByPredicate</code>",id:"updateentitiesbypredicate",level:3},{value:"<code>updateAllEntities</code>",id:"updateallentities",level:3},{value:"<code>upsertEntities</code>",id:"upsertentities",level:3},{value:"<code>upsertEntitiesById</code>",id:"upsertentitiesbyid",level:3},{value:"<code>updateEntitiesIds</code>",id:"updateentitiesids",level:3},{value:"<code>deleteEntities</code>",id:"deleteentities",level:3},{value:"<code>deleteEntitiesByPredicate</code>",id:"deleteentitiesbypredicate",level:3},{value:"<code>deleteAllEntities</code>",id:"deleteallentities",level:3},{value:"<code>moveEntity</code>",id:"moveentity",level:3},{value:"idKey",id:"idkey",level:2},{value:"initialValue",id:"initialvalue",level:2}],y={toc:c},g="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(g,(0,i.A)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"entities"},"Entities"),(0,a.yg)("p",null,"This feature enables the store to act as an entities store. You can think of an ",(0,a.yg)("inlineCode",{parentName:"p"},"entities")," state as a table in a database,\nwhere each table represents a flat collection of similar entities. Elf's entities state simplifies the process, giving you\neverything you need to manage it."),(0,a.yg)("p",null,"First, you need to install the package by using the CLI command ",(0,a.yg)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the entities package,\nor via npm:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-entities\n")),(0,a.yg)("p",null,"To use this feature, provide the ",(0,a.yg)("inlineCode",{parentName:"p"},"withEntities")," props factory function in the ",(0,a.yg)("inlineCode",{parentName:"p"},"createStore")," call:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore({ name: 'todos' }, withEntities<Todo>());\n")),(0,a.yg)(s.k,{src:l,packages:["entities"],mdxType:"LiveDemo"}),(0,a.yg)("br",null),(0,a.yg)("p",null,"This will allow you to use the following ready-made mutations and queries:"),(0,a.yg)("h2",{id:"queries"},"Queries"),(0,a.yg)("h3",{id:"selectallentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectAllEntities")),(0,a.yg)("p",null,"Select the entire store's entity collection:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectAllEntities } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectAllEntities());\n")),(0,a.yg)("h3",{id:"selectallentitiesapply"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectAllEntitiesApply")),(0,a.yg)("p",null,"Select the entire store's entity collection, and apply a ",(0,a.yg)("inlineCode",{parentName:"p"},"filter/map"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectAllEntitiesApply } from '@ngneat/elf-entities';\n\nconst titles$ = todosStore.pipe(\n  selectAllEntitiesApply({\n    mapEntity: (e) => e.title,\n    filterEntity: (e) => e.completed,\n  })\n);\n")),(0,a.yg)("p",null,"In the above example, it'll first apply the ",(0,a.yg)("inlineCode",{parentName:"p"},"filter")," and then the ",(0,a.yg)("inlineCode",{parentName:"p"},"map")," function."),(0,a.yg)("h3",{id:"getallentitiesapply"},(0,a.yg)("inlineCode",{parentName:"h3"},"getAllEntitiesApply")),(0,a.yg)("p",null,"Get the entire store's entity collection, and apply a ",(0,a.yg)("inlineCode",{parentName:"p"},"filter/map"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { getAllEntitiesApply } from '@ngneat/elf-entities';\n\nconst titles = todosStore.query(\n  getAllEntitiesApply({\n    mapEntity: (e) => e.title,\n    filterEntity: (e) => e.completed,\n  })\n);\n")),(0,a.yg)("h3",{id:"selectentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectEntities")),(0,a.yg)("p",null,"Select the entire store's entity collection as object:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectEntities } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectEntities());\n")),(0,a.yg)("h3",{id:"selectentity"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectEntity")),(0,a.yg)("p",null,"Select an entity or a slice of an entity:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectEntity } from '@ngneat/elf-entities';\n\nconst todo$ = todosStore.pipe(selectEntity(id));\nconst title$ = todosStore.pipe(selectEntity(id, { pluck: 'title' }));\nconst title$ = todosStore.pipe(selectEntity(id, { pluck: (e) => e.title }));\n")),(0,a.yg)("h3",{id:"selectentitybypredicate"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectEntityByPredicate")),(0,a.yg)("p",null,"Select an entity from the store by predicate:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectEntityByPredicate } from '@ngneat/elf-entities';\n\nconst todo$ = todosStore.pipe(\n  selectEntityByPredicate(({ completed }) => !completed)\n);\nconst title$ = todosStore.pipe(\n  selectEntityByPredicate(({ completed }) => !completed, {\n    pluck: 'title',\n    idKey: '_id',\n  })\n);\nconst title$ = todosStore.pipe(\n  selectEntityByPredicate(({ completed }) => !completed, {\n    pluck: (e) => e.title,\n    idKey: '_id',\n  })\n);\n")),(0,a.yg)("h3",{id:"selectmany"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectMany")),(0,a.yg)("p",null,"Select multiple entities from the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectMany } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectMany([id, id]));\nconst titles$ = todosStore.pipe(selectMany(id, { pluck: 'title' }));\nconst titles$ = todosStore.pipe(selectMany(id, { pluck: (e) => e.title }));\n")),(0,a.yg)("h3",{id:"selectmanybypredicate"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectManyByPredicate")),(0,a.yg)("p",null,"Select multiple entities from the store by predicate:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectManyByPredicate } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(\n  selectManyByPredicate((entity) => entity.completed === false)\n);\nconst titles$ = todosStore.pipe(\n  selectManyByPredicate((entity) => entity.completed === false, {\n    pluck: 'title',\n  })\n);\nconst titles$ = todosStore.pipe(\n  selectManyByPredicate((entity) => entity.completed === false, {\n    pluck: (e) => e.title,\n  })\n);\n")),(0,a.yg)("h3",{id:"selectfirst"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectFirst")),(0,a.yg)("p",null,"Select the first entity from the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectFirst } from '@ngneat/elf-entities';\n\nconst first$ = todosStore.pipe(selectFirst());\n")),(0,a.yg)("h3",{id:"selectlast"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectLast")),(0,a.yg)("p",null,"Select the last entity from the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectLast } from '@ngneat/elf-entities';\n\nconst last$ = todosStore.pipe(selectLast());\n")),(0,a.yg)("h3",{id:"selectentitiescount"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectEntitiesCount")),(0,a.yg)("p",null,"Select the store's entity collection size:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectEntitiesCount } from '@ngneat/elf-entities';\n\nconst count$ = todosStore.pipe(selectEntitiesCount());\n")),(0,a.yg)("h3",{id:"selectentitiescountbypredicate"},(0,a.yg)("inlineCode",{parentName:"h3"},"selectEntitiesCountByPredicate")),(0,a.yg)("p",null,"Select the store's entity collection size:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectEntitiesCountByPredicate } from '@ngneat/elf-entities';\n\nconst count$ = todosStore.pipe(\n  selectEntitiesCountByPredicate((entity) => entity.completed)\n);\n")),(0,a.yg)("h3",{id:"getallentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"getAllEntities")),(0,a.yg)("p",null,"Get the entity collection:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { getAllEntities } from '@ngneat/elf-entities';\n\nconst todos = todosStore.query(getAllEntities());\n")),(0,a.yg)("h3",{id:"getentitiesids"},(0,a.yg)("inlineCode",{parentName:"h3"},"getEntitiesIds")),(0,a.yg)("p",null,"Get the entities ids:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { getEntitiesIds } from '@ngneat/elf-entities';\n\nconst todosIds = todosStore.query(getEntitiesIds());\n")),(0,a.yg)("h3",{id:"getentity"},(0,a.yg)("inlineCode",{parentName:"h3"},"getEntity")),(0,a.yg)("p",null,"Get an entity by id:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { getEntity } from '@ngneat/elf-entities';\n\nconst todo = todosStore.query(getEntity(id));\n")),(0,a.yg)("h3",{id:"getentitybypredicate"},(0,a.yg)("inlineCode",{parentName:"h3"},"getEntityByPredicate")),(0,a.yg)("p",null,"Get first entity from the store by predicate:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { getEntityByPredicate } from '@ngneat/elf-entities';\n\nconst todo = todosStore.query(\n  getEntityByPredicate(({ title }) => title === 'Elf')\n);\n")),(0,a.yg)("h3",{id:"hasentity"},(0,a.yg)("inlineCode",{parentName:"h3"},"hasEntity")),(0,a.yg)("p",null,"Returns whether an entity exists:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { hasEntity } from '@ngneat/elf-entities';\n\nif (todosStore.query(hasEntity(id))) {\n}\n")),(0,a.yg)("h3",{id:"getentitiescount"},(0,a.yg)("inlineCode",{parentName:"h3"},"getEntitiesCount")),(0,a.yg)("p",null,"Get the store's entity collection size:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { getEntitiesCount } from '@ngneat/elf-entities';\n\nconst count = todosStore.query(getEntitiesCount());\n")),(0,a.yg)("h3",{id:"getentitiescountbypredicate"},(0,a.yg)("inlineCode",{parentName:"h3"},"getEntitiesCountByPredicate")),(0,a.yg)("p",null,"Get the store's entity collection size:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { getEntitiesCountByPredicate } from '@ngneat/elf-entities';\n\nconst count = todosStore.query(\n  getEntitiesCountByPredicate((entity) => entity.completed)\n);\n")),(0,a.yg)("h2",{id:"mutations"},"Mutations"),(0,a.yg)("h3",{id:"setentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"setEntities")),(0,a.yg)("p",null,"Replace current collection with the provided collection:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { setEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(setEntities([todo, todo]));\n")),(0,a.yg)("h3",{id:"setentitiesmap"},(0,a.yg)("inlineCode",{parentName:"h3"},"setEntitiesMap")),(0,a.yg)("p",null,"Replace current collection with the provided map:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { setEntitiesMap } from '@ngneat/elf-entities';\n\nconst todos = {\n  1: {\n    id: 1,\n    task: 'Buy milk',\n  },\n  2: {\n    id: 2,\n    task: 'Fix car',\n  },\n};\ntodosStore.update(setEntitiesMap(todos));\n")),(0,a.yg)("h3",{id:"addentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"addEntities")),(0,a.yg)("p",null,"Add an entity or entities to the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { addEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(addEntities(todo));\n\ntodosStore.update(addEntities([todo, todo]));\n\ntodosStore.update(addEntities([todo, todo], { prepend: true }));\n")),(0,a.yg)("h3",{id:"addentitiesfifo"},(0,a.yg)("inlineCode",{parentName:"h3"},"addEntitiesFifo")),(0,a.yg)("p",null,"Add an entity or entities to the store using fifo strategy:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { addEntitiesFifo } from '@ngneat/elf-entities';\n\ntodosStore.update(addEntitiesFifo([entity, entity]), { limit: 3 });\n")),(0,a.yg)("h3",{id:"updateentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"updateEntities")),(0,a.yg)("p",null,"Update an entity or entities in the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { updateEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(updateEntities(id, { name }));\n\ntodosStore.update(updateEntities(id, (entity) => ({ ...entity, name })));\n\ntodosStore.update(updateEntities([id, id, id], { open: true }));\n")),(0,a.yg)("h3",{id:"updateentitiesbypredicate"},(0,a.yg)("inlineCode",{parentName:"h3"},"updateEntitiesByPredicate")),(0,a.yg)("p",null,"Update an entity or entities in the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { updateEntitiesByPredicate } from '@ngneat/elf-entities';\n\ntodosStore.update(\n  updateEntitiesByPredicate(({ count }) => count === 0, { open: false })\n);\n\ntodosStore.update(\n  updateEntitiesByPredicate(({ count }) => count === 0),\n  (entity) => ({ ...entity, open: false })\n);\n")),(0,a.yg)("h3",{id:"updateallentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"updateAllEntities")),(0,a.yg)("p",null,"Update all entities in the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { updateAllEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(updateAllEntities({ name: 'elf' }));\n\ntodosStore.update(\n  updateAllEntities((entity) => ({ ...entity, count: entity.count + 1 }))\n);\n")),(0,a.yg)("h3",{id:"upsertentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"upsertEntities")),(0,a.yg)("p",null,"Add or update entities."),(0,a.yg)("p",null,"To identify entities in the store, every entity must have an ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," property. Any partial entities will be merged with the existing ones:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { upsertEntitiesBy } from '@ngneat/elf-entities';\n\ntodosStore.update(upsertEntities({ id: '1', happy: true }));\n\ntodosStore.update(\n  upsertEntities([\n    { id: '1', happy: true },\n    { id: '2', name: 'elf 2', happy: false },\n  ])\n);\n")),(0,a.yg)("h3",{id:"upsertentitiesbyid"},(0,a.yg)("inlineCode",{parentName:"h3"},"upsertEntitiesById")),(0,a.yg)("p",null,"Insert or update an entity. When the id isn't found, it creates a new entity; otherwise, it performs an update:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { upsertEntitiesById } from '@ngneat/elf-entities';\n\nconst creator = (id) => createTodo(id);\n\ntodosStore.update(\n  upsertEntitiesById(1, {\n    updater: { name: 'elf' },\n    creator,\n  })\n);\n\ntodosStore.update(\n  upsertEntitiesById([1, 2], {\n    updater: (entity) => ({ ...entity, count: entity.count + 1 }),\n    creator,\n  })\n);\n")),(0,a.yg)("p",null,"To perform a merge between a new entity and an ",(0,a.yg)("inlineCode",{parentName:"p"},"updater")," result, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"mergeUpdaterWithCreator")," option:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"todosStore.update(\n  upsertEntitiesById([1, 2], {\n    updater: (entity) => ({ ...entity, name }),\n    creator,\n    // highlight-next-line\n    mergeUpdaterWithCreator: true,\n  })\n);\n")),(0,a.yg)("p",null,"The above example will first create the entity using the ",(0,a.yg)("em",{parentName:"p"},"creator")," method, then pass the result to the ",(0,a.yg)("em",{parentName:"p"},"updater")," method, and merge both."),(0,a.yg)("h3",{id:"updateentitiesids"},(0,a.yg)("inlineCode",{parentName:"h3"},"updateEntitiesIds")),(0,a.yg)("p",null,"Update id of an entity or entities in the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { updateEntitiesIds } from '@ngneat/elf-entities';\n\ntodosStore.update(updateEntitiesIds(oldId, newId));\n\ntodosStore.update(updateEntitiesIds([oldId1, oldId2], [newId1, newId2]));\n")),(0,a.yg)("p",null,'The most common use case for this is "optimistic updates":'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"function addTodo(todo: Todo) {\n  const tempId = generateRandomId();\n  todosStore.update(addEntities({ ...todo, id: tempId }));\n\n  addTodoToServer(todo).then(\n    (response) => {\n      todosStore.update(\n        updateEntitiesIds(tempId, response.id),\n        updateEntities(response.id, response)\n      );\n    },\n    (error) => {\n      todosStore.update(deleteEntities(tempId));\n      // handle error\n    }\n  );\n}\n")),(0,a.yg)("h3",{id:"deleteentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"deleteEntities")),(0,a.yg)("p",null,"Delete an entity or entities from the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { deleteEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(deleteEntities(id));\ntodosStore.update(deleteEntities([id, id]));\n")),(0,a.yg)("h3",{id:"deleteentitiesbypredicate"},(0,a.yg)("inlineCode",{parentName:"h3"},"deleteEntitiesByPredicate")),(0,a.yg)("p",null,"Delete an entity or entities from the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { deleteEntitiesByPredicate } from '@ngneat/elf-entities';\n\ntodosStore.update(deleteEntitiesByPredicate(({ completed }) => completed));\n")),(0,a.yg)("h3",{id:"deleteallentities"},(0,a.yg)("inlineCode",{parentName:"h3"},"deleteAllEntities")),(0,a.yg)("p",null,"Delete all entities from the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { deleteAllEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(deleteAllEntities());\n")),(0,a.yg)("h3",{id:"moveentity"},(0,a.yg)("inlineCode",{parentName:"h3"},"moveEntity")),(0,a.yg)("p",null,"Moves an entity within the store:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { moveEntity } from '@ngneat/elf-entities';\n\ntodosStore.update(moveEntity({ fromIndex: 0, toIndex: 1 }));\n")),(0,a.yg)("h2",{id:"idkey"},"idKey"),(0,a.yg)("p",null,"By default, Elf takes the ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," key from the entity ",(0,a.yg)("inlineCode",{parentName:"p"},"id")," field. To change it, you can pass the ",(0,a.yg)("inlineCode",{parentName:"p"},"idKey")," option to\nthe ",(0,a.yg)("inlineCode",{parentName:"p"},"withEntities")," function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { addEntities } from '@ngneat/elf-entities';\n\ninterface Todo {\n  _id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo, '_id'>({ idKey: '_id' })\n);\n")),(0,a.yg)("h2",{id:"initialvalue"},"initialValue"),(0,a.yg)("p",null,"In case that you need to start the ",(0,a.yg)("inlineCode",{parentName:"p"},"entities")," state with a value, you can specify it in the ",(0,a.yg)("inlineCode",{parentName:"p"},"initialValue")," configuration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\n\nconst store = createStore(\n  { name },\n  withEntities<Widget>({ initialValue: [{ id: 1, name: '' }] })\n);\n")))}u.isMDXComponent=!0}}]);