// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Repo Builder all in a class: all in a class 1`] = `
"import { createStore, withProps } from '@ngneat/elf';
import { withEntities, selectAllEntities, deleteEntities, addEntities, updateEntities, withUIEntities, withActiveId, selectActiveEntity, setActiveId, withActiveIds, selectActiveEntities, toggleActiveIds } from '@ngneat/elf-entities';
import { Observable } from 'rxjs';
import { withRequestsCache, withRequestsStatus } from '@ngneat/elf-requests';

export interface TodoUI {
  id: number;
}

export interface Todo {
  id: number;
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface TodosProps {
}

export class TodosRepository {
  activeTodos$: Observable<Todo[]>;
  activeTodo$: Observable<Todo | undefined>;
  todos$: Observable<Todo[]>;

  private store;

  constructor() {
    this.store = this.createStore();
    this.todos$ = this.store.pipe(selectAllEntities());
    this.activeTodo$ = this.store.pipe(selectActiveEntity());
    this.activeTodos$ = this.store.pipe(selectActiveEntities());
  }

  deleteTodo(id: Todo['id']) {
    this.store.update(deleteEntities(id));
  }

  addTodo(todo: Todo) {
    this.store.update(addEntities(todo));
  }

  updateTodo(id: Todo['id'], todo: Partial<Todo>) {
    this.store.update(updateEntities(id, todo));
  }

  setActiveId(id: Todo['id']) {
    this.store.update(setActiveId(id));
  }

  toggleActiveIds(ids: Array<Todo['id']>) {
    this.store.update(toggleActiveIds(ids));
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withProps<TodosProps>({}), withEntities<Todo>(), withUIEntities<TodoUI>(), withActiveId(), withActiveIds(), withRequestsCache<'todos'>(), withRequestsStatus<'todos'>());

    return store;
  }
}
"
`;

exports[`Repo Builder all: all 1`] = `
"import { createStore, withProps } from '@ngneat/elf';
import { withEntities, selectAllEntities, deleteEntities, addEntities, updateEntities, withUIEntities, withActiveId, selectActiveEntity, setActiveId, withActiveIds, selectActiveEntities, toggleActiveIds } from '@ngneat/elf-entities';
import { withRequestsCache, withRequestsStatus } from '@ngneat/elf-requests';

export interface TodoUI {
  id: number;
}

export interface Todo {
  id: number;
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface TodosProps {
}

const store = createStore({ name: 'todos' }, withProps<TodosProps>({}), withEntities<Todo>(), withUIEntities<TodoUI>(), withActiveId(), withActiveIds(), withRequestsCache<'todos'>(), withRequestsStatus<'todos'>());

export class TodosRepository {
  activeTodos$ = store.pipe(selectActiveEntities());
  activeTodo$ = store.pipe(selectActiveEntity());
  todos$ = store.pipe(selectAllEntities());

  deleteTodo(id: Todo['id']) {
    store.update(deleteEntities(id));
  }

  addTodo(todo: Todo) {
    store.update(addEntities(todo));
  }

  updateTodo(id: Todo['id'], todo: Partial<Todo>) {
    store.update(updateEntities(id, todo));
  }

  setActiveId(id: Todo['id']) {
    store.update(setActiveId(id));
  }

  toggleActiveIds(ids: Array<Todo['id']>) {
    store.update(toggleActiveIds(ids));
  }
}
"
`;

exports[`Repo Builder should support function template: all 1`] = `
"import { createStore, withProps } from '@ngneat/elf';
import { withEntities, selectAllEntities, deleteEntities, addEntities, updateEntities, withUIEntities, withActiveId, selectActiveEntity, setActiveId, withActiveIds, selectActiveEntities, toggleActiveIds } from '@ngneat/elf-entities';
import { withRequestsCache, withRequestsStatus } from '@ngneat/elf-requests';

export interface TodoUI {
  id: number;
}

export interface Todo {
  id: number;
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface TodosProps {
}

export const todosStore = createStore({ name: 'todos' }, withProps<TodosProps>({}), withEntities<Todo>(), withUIEntities<TodoUI>(), withActiveId(), withActiveIds(), withRequestsCache<'todos'>(), withRequestsStatus<'todos'>());

export const activeTodos$ = todosStore.pipe(selectActiveEntities());

export const activeTodo$ = todosStore.pipe(selectActiveEntity());

export const todos$ = todosStore.pipe(selectAllEntities());

export function deleteTodo(id: Todo['id']) {
  todosStore.update(deleteEntities(id));
}

export function addTodo(todo: Todo) {
  todosStore.update(addEntities(todo));
}

export function updateTodo(id: Todo['id'], todo: Partial<Todo>) {
  todosStore.update(updateEntities(id, todo));
}

export function setActiveTodosId(id: Todo['id']) {
  todosStore.update(setActiveId(id));
}

export function toggleActiveTodosIds(ids: Array<Todo['id']>) {
  todosStore.update(toggleActiveIds(ids));
}
"
`;

exports[`Repo Builder withActiveId in a class: withActiveId in a class 1`] = `
"import { createStore } from '@ngneat/elf';
import { withActiveId, selectActiveEntity, setActiveId } from '@ngneat/elf-entities';

export class TodosRepository {
  activeTodo$: Observable<Todo | undefined>;

  private store;

  constructor() {
    this.store = this.createStore();
    this.activeTodo$ = this.store.pipe(selectActiveEntity());
  }

  setActiveId(id: Todo['id']) {
    this.store.update(setActiveId(id));
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withActiveId());

    return store;
  }
}
"
`;

exports[`Repo Builder withActiveId: withActiveId 1`] = `
"import { createStore } from '@ngneat/elf';
import { withActiveId, selectActiveEntity, setActiveId } from '@ngneat/elf-entities';

const store = createStore({ name: 'todos' }, withActiveId());

export class TodosRepository {
  activeTodo$ = store.pipe(selectActiveEntity());

  setActiveId(id: Todo['id']) {
    store.update(setActiveId(id));
  }
}
"
`;

exports[`Repo Builder withActiveIds in a class: withActiveIds in a class 1`] = `
"import { createStore } from '@ngneat/elf';
import { withActiveIds, selectActiveEntities, toggleActiveIds } from '@ngneat/elf-entities';

export class TodosRepository {
  activeTodos$: Observable<Todo[]>;

  private store;

  constructor() {
    this.store = this.createStore();
    this.activeTodos$ = this.store.pipe(selectActiveEntities());
  }

  toggleActiveIds(ids: Array<Todo['id']>) {
    this.store.update(toggleActiveIds(ids));
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withActiveIds());

    return store;
  }
}
"
`;

exports[`Repo Builder withActiveIds: withActiveIds 1`] = `
"import { createStore } from '@ngneat/elf';
import { withActiveIds, selectActiveEntities, toggleActiveIds } from '@ngneat/elf-entities';

const store = createStore({ name: 'todos' }, withActiveIds());

export class TodosRepository {
  activeTodos$ = store.pipe(selectActiveEntities());

  toggleActiveIds(ids: Array<Todo['id']>) {
    store.update(toggleActiveIds(ids));
  }
}
"
`;

exports[`Repo Builder withEntities idKey in a class: withEntities in a class 1`] = `
"import { createStore } from '@ngneat/elf';
import { withEntities, selectAllEntities, addEntities, updateEntities, deleteEntities } from '@ngneat/elf-entities';
import { Observable } from 'rxjs';

export interface Todo {
  _id: number;
}

export class TodosRepository {
  todos$: Observable<Todo[]>;

  private store;

  constructor() {
    this.store = this.createStore();
    this.todos$ = this.store.pipe(selectAllEntities());
  }

  addTodo(todo: Todo) {
    this.store.update(addEntities(todo));
  }

  updateTodo(id: Todo['_id'], todo: Partial<Todo>) {
    this.store.update(updateEntities(id, todo));
  }

  deleteTodo(id: Todo['_id']) {
    this.store.update(deleteEntities(id));
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withEntities<Todo, '_id'>({ idKey: '_id' }));

    return store;
  }
}
"
`;

exports[`Repo Builder withEntities idKey: withEntities 1`] = `
"import { createStore } from '@ngneat/elf';
import { withEntities, selectAllEntities, addEntities, updateEntities, deleteEntities } from '@ngneat/elf-entities';

export interface Todo {
  _id: number;
}

const store = createStore({ name: 'todos' }, withEntities<Todo, '_id'>({ idKey: '_id' }));

export class TodosRepository {
  todos$ = store.pipe(selectAllEntities());

  addTodo(todo: Todo) {
    store.update(addEntities(todo));
  }

  updateTodo(id: Todo['_id'], todo: Partial<Todo>) {
    store.update(updateEntities(id, todo));
  }

  deleteTodo(id: Todo['_id']) {
    store.update(deleteEntities(id));
  }
}
"
`;

exports[`Repo Builder withEntities in a class: withEntities in a class 1`] = `
"import { createStore } from '@ngneat/elf';
import { withEntities, selectAllEntities } from '@ngneat/elf-entities';
import { Observable } from 'rxjs';

export interface Todo {
  id: number;
}

export class TodosRepository {
  todos$: Observable<Todo[]>;

  private store;

  constructor() {
    this.store = this.createStore();
    this.todos$ = this.store.pipe(selectAllEntities());
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withEntities<Todo>());

    return store;
  }
}
"
`;

exports[`Repo Builder withEntities: withEntities 1`] = `
"import { createStore } from '@ngneat/elf';
import { withEntities, selectAllEntities, addEntities, updateEntities, deleteEntities } from '@ngneat/elf-entities';

export interface Todo {
  id: number;
}

const store = createStore({ name: 'todos' }, withEntities<Todo>());

export class TodosRepository {
  todos$ = store.pipe(selectAllEntities());

  addTodo(todo: Todo) {
    store.update(addEntities(todo));
  }

  updateTodo(id: Todo['id'], todo: Partial<Todo>) {
    store.update(updateEntities(id, todo));
  }

  deleteTodo(id: Todo['id']) {
    store.update(deleteEntities(id));
  }
}
"
`;

exports[`Repo Builder withProps in a class: withProps in a class 1`] = `
"import { createStore, withProps } from '@ngneat/elf';

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface TodosProps {
}

export class TodosRepository {
  private store;

  constructor() {
    this.store = this.createStore();
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withProps<TodosProps>({}));

    return store;
  }
}
"
`;

exports[`Repo Builder withProps: withProps 1`] = `
"import { createStore, withProps } from '@ngneat/elf';

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface TodosProps {
}

const store = createStore({ name: 'todos' }, withProps<TodosProps>({}));

export class TodosRepository {
}
"
`;

exports[`Repo Builder withRequestsCache in a class: withRequestsCache in a class 1`] = `
"import { createStore } from '@ngneat/elf';
import { withRequestsCache } from '@ngneat/elf-requests';

export class TodosRepository {
  private store;

  constructor() {
    this.store = this.createStore();
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withRequestsCache<'todos'>());

    return store;
  }
}
"
`;

exports[`Repo Builder withRequestsCache: withRequestsCache 1`] = `
"import { createStore } from '@ngneat/elf';
import { withRequestsCache } from '@ngneat/elf-requests';

const store = createStore({ name: 'todos' }, withRequestsCache<'todos'>());

export class TodosRepository {
}
"
`;

exports[`Repo Builder withRequestsStatus in a class: withRequestsStatus in a class 1`] = `
"import { createStore } from '@ngneat/elf';
import { withRequestsStatus } from '@ngneat/elf-requests';

export class TodosRepository {
  private store;

  constructor() {
    this.store = this.createStore();
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withRequestsStatus<'todos'>());

    return store;
  }
}
"
`;

exports[`Repo Builder withRequestsStatus: withRequestsStatus 1`] = `
"import { createStore } from '@ngneat/elf';
import { withRequestsStatus } from '@ngneat/elf-requests';

const store = createStore({ name: 'todos' }, withRequestsStatus<'todos'>());

export class TodosRepository {
}
"
`;

exports[`Repo Builder withUIEntities in a class: withUIEntities in a class 1`] = `
"import { createStore } from '@ngneat/elf';
import { withUIEntities } from '@ngneat/elf-entities';

export interface TodoUI {
  id: number;
}

export class TodosRepository {
  private store;

  constructor() {
    this.store = this.createStore();
  }

  private createStore(): typeof store {
    const store = createStore({ name: 'todos' }, withUIEntities<TodoUI>());

    return store;
  }
}
"
`;

exports[`Repo Builder withUIEntities: withUIEntities 1`] = `
"import { createStore } from '@ngneat/elf';
import { withUIEntities } from '@ngneat/elf-entities';

export interface TodoUI {
  id: number;
}

const store = createStore({ name: 'todos' }, withUIEntities<TodoUI>());

export class TodosRepository {
}
"
`;
